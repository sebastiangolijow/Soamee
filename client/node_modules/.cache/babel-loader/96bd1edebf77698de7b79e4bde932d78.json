{"ast":null,"code":"import { useEffect } from \"react\";\nconst InitialState = {\n  Books: [],\n  Searchvalue: '',\n  Details: {},\n  Carrito: [],\n  Users: [],\n  timeLogged: []\n};\n\nfunction Reducer(state = InitialState, action) {\n  switch (action.type) {\n    case \"ALL_BOOKS\":\n      return { ...state,\n        Books: action.payload\n      };\n\n    case 'USER':\n      return { ...state,\n        Users: action.payload\n      };\n\n    case 'LOGOUT':\n      return { ...state,\n        Users: []\n      };\n\n    case 'CLEAR_ALL':\n      return {\n        Carrito: []\n      };\n\n    case \"SEARCHVALUE\":\n      return { ...state,\n        Searchvalue: action.payload\n      };\n\n    case 'GET_DETAILS':\n      return { ...state,\n        Details: action.payload\n      };\n\n    case 'REMOVE':\n      return { ...state,\n        Carrito: state.Carrito.filter(item => item.sku !== action.payload)\n      };\n\n    case 'addcart':\n      {\n        return {\n          Carrito: state.Carrito.concat(action.payload)\n        };\n      }\n\n    case 'AGREGAR_CARRITO':\n      return { ...state,\n        Carrito: state.Carrito.concat(action.payload)\n      };\n\n    case 'updateTime':\n      let key = JSON.parse(window.localStorage.getItem('key'));\n      let email = key.email;\n      return { ...state,\n        timeLogged: action.payload.filter(item => item.email === email)\n      };\n\n    case \"SEARCH\":\n      if (!action.price && !action.date) {\n        return { ...state,\n          Products: action.payload\n        };\n      }\n\n      if (action.price && !action.date) {\n        return { ...state,\n          Products: action.payload.filter(item => item.salePrice < action.price)\n        };\n      }\n\n      if (action.date && !action.price) {\n        return { ...state,\n          Products: action.payload.filter(item => parseInt(item.releaseDate.split('-')[0]) > parseInt(action.date) && parseInt(item.releaseDate.split('-')[0]) < parseInt(action.date) + 5)\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\n_c = Reducer;\nexport default Reducer; // }\n// if(action.date && !action.price){\n//   return { \n//     ...state,\n//     Products:\n//   }\n// }\n// if(action.date && action.price){\n//   return { \n//     ...state,\n//     Temp: action.payload.filter((item) => item.salePrice < action.price),\n//     Products: Temp.filter((item) => parseInt(item.releaseDate.split('-')[0]) > parseInt(action.date))\n//   }\n// }\n//  else {\n// return { ...state,\n//   Products: action.payload\n// }};\n\nvar _c;\n\n$RefreshReg$(_c, \"Reducer\");","map":{"version":3,"sources":["C:/Users/sebas/Desktop/folders/Jobs/Elaastacloud/client/src/Redux/Reducer.js"],"names":["useEffect","InitialState","Books","Searchvalue","Details","Carrito","Users","timeLogged","Reducer","state","action","type","payload","filter","item","sku","concat","key","JSON","parse","window","localStorage","getItem","email","price","date","Products","salePrice","parseInt","releaseDate","split"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\r\n\r\nconst InitialState = {\r\n   Books: [],\r\n   Searchvalue: '',\r\n   Details: {},\r\n   Carrito: [],\r\n   Users:[],\r\n   timeLogged: []\r\n  };\r\n  \r\nfunction Reducer(state = InitialState, action) {\r\n\r\n    switch (action.type) { \r\n      case \"ALL_BOOKS\":\r\n        return { ...state,\r\n        Books: action.payload \r\n        };\r\n        case 'USER':\r\n          return {\r\n            ...state,\r\n            Users: action.payload\r\n          };\r\n        case 'LOGOUT':\r\n          return {\r\n            ...state,\r\n            Users: []\r\n          }\r\n          case 'CLEAR_ALL':\r\n            return {\r\n              Carrito: []\r\n            }\r\n        \r\n        case \"SEARCHVALUE\":\r\n          return { ...state,\r\n          Searchvalue: action.payload\r\n          };\r\n        case 'GET_DETAILS': \r\n        return {\r\n          ...state,\r\n          Details: action.payload\r\n        };\r\n        case 'REMOVE': \r\n        return {\r\n          ...state,\r\n          Carrito: state.Carrito.filter(item => item.sku !== action.payload)\r\n        }        \r\n        case 'addcart': {\r\n          return {\r\n            Carrito: state.Carrito.concat(action.payload)\r\n          }\r\n        }\r\n        case 'AGREGAR_CARRITO': \r\n        return {\r\n          ...state,\r\n          Carrito: state.Carrito.concat(action.payload)\r\n        } \r\n        case 'updateTime': \r\n        let key = JSON.parse(window.localStorage.getItem('key'));\r\n        let email = key.email;\r\n        return {\r\n          ...state,\r\n          timeLogged: action.payload.filter(item => item.email === email)\r\n        } \r\n      case \"SEARCH\":\r\n        if(!action.price && !action.date){\r\n          return {\r\n            ...state,\r\n            Products:action.payload\r\n          }\r\n        }\r\n        if(action.price && !action.date){\r\n          return {\r\n            ...state,\r\n            Products: action.payload.filter((item) => item.salePrice < action.price)\r\n          }\r\n        }\r\n        if(action.date && !action.price){\r\n          return {\r\n            ...state,\r\n            Products:  action.payload.filter((item) => parseInt(item.releaseDate.split('-')[0]) > parseInt(action.date) && parseInt(item.releaseDate.split('-')[0]) <  (parseInt(action.date) + 5) )\r\n          }\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n  export default Reducer;\r\n\r\n\r\n    // }\r\n    \r\n        // if(action.date && !action.price){\r\n        //   return { \r\n        //     ...state,\r\n        //     Products:\r\n        //   }\r\n        // }\r\n        // if(action.date && action.price){\r\n        //   return { \r\n        //     ...state,\r\n        //     Temp: action.payload.filter((item) => item.salePrice < action.price),\r\n        //     Products: Temp.filter((item) => parseInt(item.releaseDate.split('-')[0]) > parseInt(action.date))\r\n        //   }\r\n        // }\r\n        //  else {\r\n        // return { ...state,\r\n        //   Products: action.payload\r\n        // }};"]},"metadata":{},"sourceType":"module"}