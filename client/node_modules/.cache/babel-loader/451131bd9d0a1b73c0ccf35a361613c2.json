{"ast":null,"code":"module.exports = versionEndpoint;\n\nvar pkg = require('../package.json');\n\nfunction versionEndpoint(opts) {\n  return function version(callback) {\n    var url = `${opts.url}/version.txt`;\n    const jsonifiedCallback = callback ? jsonify(callback) : undefined;\n    return opts.apiService({\n      url\n    }, jsonifiedCallback).then(version => {\n      return createVersionObject(version);\n    });\n  };\n}\n\nfunction jsonify(cb) {\n  return function (err, version) {\n    if (err) return cb(err);\n    return cb(null, createVersionObject(version));\n  };\n}\n\nfunction createVersionObject(apiVersion) {\n  return {\n    packageVersion: pkg.version,\n    apiVersion: apiVersion.trim()\n  };\n}","map":{"version":3,"sources":["C:/Users/sebas/Desktop/folders/Jobs/Elaastacloud/client/node_modules/bestbuy/lib/version.js"],"names":["module","exports","versionEndpoint","pkg","require","opts","version","callback","url","jsonifiedCallback","jsonify","undefined","apiService","then","createVersionObject","cb","err","apiVersion","packageVersion","trim"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,eAAjB;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAjB;;AAEA,SAASF,eAAT,CAA0BG,IAA1B,EAAgC;AAC9B,SAAO,SAASC,OAAT,CAAkBC,QAAlB,EAA4B;AACjC,QAAIC,GAAG,GAAI,GAAEH,IAAI,CAACG,GAAI,cAAtB;AACA,UAAMC,iBAAiB,GAAGF,QAAQ,GAAGG,OAAO,CAACH,QAAD,CAAV,GAAuBI,SAAzD;AAEA,WAAON,IAAI,CAACO,UAAL,CAAgB;AAAEJ,MAAAA;AAAF,KAAhB,EAAyBC,iBAAzB,EACJI,IADI,CACCP,OAAO,IAAI;AACf,aAAOQ,mBAAmB,CAACR,OAAD,CAA1B;AACD,KAHI,CAAP;AAID,GARD;AASD;;AAED,SAASI,OAAT,CAAkBK,EAAlB,EAAsB;AACpB,SAAO,UAAUC,GAAV,EAAeV,OAAf,EAAwB;AAC7B,QAAIU,GAAJ,EAAS,OAAOD,EAAE,CAACC,GAAD,CAAT;AACT,WAAOD,EAAE,CAAC,IAAD,EAAOD,mBAAmB,CAACR,OAAD,CAA1B,CAAT;AACD,GAHD;AAID;;AAED,SAASQ,mBAAT,CAA8BG,UAA9B,EAA0C;AACxC,SAAO;AACLC,IAAAA,cAAc,EAAEf,GAAG,CAACG,OADf;AAELW,IAAAA,UAAU,EAAEA,UAAU,CAACE,IAAX;AAFP,GAAP;AAID","sourcesContent":["module.exports = versionEndpoint;\n\nvar pkg = require('../package.json');\n\nfunction versionEndpoint (opts) {\n  return function version (callback) {\n    var url = `${opts.url}/version.txt`;\n    const jsonifiedCallback = callback ? jsonify(callback) : undefined;\n\n    return opts.apiService({ url }, jsonifiedCallback)\n      .then(version => {\n        return createVersionObject(version);\n      });\n  };\n}\n\nfunction jsonify (cb) {\n  return function (err, version) {\n    if (err) return cb(err);\n    return cb(null, createVersionObject(version));\n  };\n}\n\nfunction createVersionObject (apiVersion) {\n  return {\n    packageVersion: pkg.version,\n    apiVersion: apiVersion.trim()\n  };\n}\n"]},"metadata":{},"sourceType":"script"}