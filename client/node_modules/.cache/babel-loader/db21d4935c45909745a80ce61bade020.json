{"ast":null,"code":"module.exports = availabilityEndpoint;\n\nfunction availabilityEndpoint(opts) {\n  return {\n    availability,\n    availabilityAsStream\n  };\n\n  function availability(sku, storeIdsArray, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    if (typeof callback !== 'function' && typeof callback !== 'undefined') {\n      var argsErr = new Error('Unrecognized parameter length when calling \"availability\" method');\n      return Promise.reject(argsErr);\n    }\n\n    var req;\n\n    try {\n      req = prepareRequest(sku, storeIdsArray, params);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n\n      return Promise.reject(err);\n    }\n\n    return opts.apiService(req, callback);\n  }\n\n  function availabilityAsStream(sku, storIdsArray, params) {\n    // availability calls can only have pageSize 10 max\n    if (!params) params = {};\n    params.pageSize = 10;\n    return opts.apiStreamService('products.*', prepareRequest(sku, storIdsArray, params));\n  }\n\n  function prepareRequest(sku, storeIdsArray, params) {\n    // ensure sku is good\n    if (typeof sku !== 'number' && typeof sku !== 'string') {\n      throw new Error('First parameter of \"availability\" must be the SKU, and it must be either a number or a string');\n    } // ensure storeIdsArray is good\n\n\n    if (!Array.isArray(storeIdsArray)) {\n      throw new Error('Second parameter of \"availability\" must be store id(s), and it must be either a number or array of numbers');\n    }\n\n    var storeIds = storeIdsArray.join(',');\n    var bbyQuery = `(sku=${sku})+stores(storeId in(${storeIds}))`;\n    var url = `${opts.url}/v1/products${bbyQuery}`;\n    return {\n      url,\n      params\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/sebas/Desktop/folders/Jobs/Elaastacloud/client/node_modules/bestbuy/lib/availability.js"],"names":["module","exports","availabilityEndpoint","opts","availability","availabilityAsStream","sku","storeIdsArray","params","callback","argsErr","Error","Promise","reject","req","prepareRequest","err","apiService","storIdsArray","pageSize","apiStreamService","Array","isArray","storeIds","join","bbyQuery","url"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,oBAAjB;;AAEA,SAASA,oBAAT,CAA+BC,IAA/B,EAAqC;AACnC,SAAO;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAP;;AAEA,WAASD,YAAT,CAAuBE,GAAvB,EAA4BC,aAA5B,EAA2CC,MAA3C,EAAmDC,QAAnD,EAA6D;AAC3D,QAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AAChCC,MAAAA,QAAQ,GAAGD,MAAX;AACAA,MAAAA,MAAM,GAAG,EAAT;AACD;;AAED,QAAI,OAAOC,QAAP,KAAoB,UAApB,IAAkC,OAAOA,QAAP,KAAoB,WAA1D,EAAuE;AACrE,UAAIC,OAAO,GAAG,IAAIC,KAAJ,CAAU,kEAAV,CAAd;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeH,OAAf,CAAP;AACD;;AAED,QAAII,GAAJ;;AACA,QAAI;AACFA,MAAAA,GAAG,GAAGC,cAAc,CAACT,GAAD,EAAMC,aAAN,EAAqBC,MAArB,CAApB;AACD,KAFD,CAEE,OAAOQ,GAAP,EAAY;AACZ,UAAIP,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACO,GAAD,CAAR;AACD;;AACD,aAAOJ,OAAO,CAACC,MAAR,CAAeG,GAAf,CAAP;AACD;;AAED,WAAOb,IAAI,CAACc,UAAL,CAAgBH,GAAhB,EAAqBL,QAArB,CAAP;AACD;;AAED,WAASJ,oBAAT,CAA+BC,GAA/B,EAAoCY,YAApC,EAAkDV,MAAlD,EAA0D;AACxD;AACA,QAAI,CAACA,MAAL,EAAaA,MAAM,GAAG,EAAT;AACbA,IAAAA,MAAM,CAACW,QAAP,GAAkB,EAAlB;AAEA,WAAOhB,IAAI,CAACiB,gBAAL,CAAsB,YAAtB,EAAoCL,cAAc,CAACT,GAAD,EAAMY,YAAN,EAAoBV,MAApB,CAAlD,CAAP;AACD;;AAED,WAASO,cAAT,CAAyBT,GAAzB,EAA8BC,aAA9B,EAA6CC,MAA7C,EAAqD;AACnD;AACA,QAAI,OAAOF,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;AACtD,YAAM,IAAIK,KAAJ,CAAU,+FAAV,CAAN;AACD,KAJkD,CAMnD;;;AACA,QAAI,CAACU,KAAK,CAACC,OAAN,CAAcf,aAAd,CAAL,EAAmC;AACjC,YAAM,IAAII,KAAJ,CAAU,4GAAV,CAAN;AACD;;AAED,QAAIY,QAAQ,GAAGhB,aAAa,CAACiB,IAAd,CAAmB,GAAnB,CAAf;AACA,QAAIC,QAAQ,GAAI,QAAOnB,GAAI,uBAAsBiB,QAAS,IAA1D;AAEA,QAAIG,GAAG,GAAI,GAAEvB,IAAI,CAACuB,GAAI,eAAcD,QAAS,EAA7C;AAEA,WAAO;AAAEC,MAAAA,GAAF;AAAOlB,MAAAA;AAAP,KAAP;AACD;AACF","sourcesContent":["module.exports = availabilityEndpoint;\n\nfunction availabilityEndpoint (opts) {\n  return { availability, availabilityAsStream };\n\n  function availability (sku, storeIdsArray, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    if (typeof callback !== 'function' && typeof callback !== 'undefined') {\n      var argsErr = new Error('Unrecognized parameter length when calling \"availability\" method');\n      return Promise.reject(argsErr);\n    }\n\n    var req;\n    try {\n      req = prepareRequest(sku, storeIdsArray, params);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n      return Promise.reject(err);\n    }\n\n    return opts.apiService(req, callback);\n  }\n\n  function availabilityAsStream (sku, storIdsArray, params) {\n    // availability calls can only have pageSize 10 max\n    if (!params) params = {};\n    params.pageSize = 10;\n\n    return opts.apiStreamService('products.*', prepareRequest(sku, storIdsArray, params));\n  }\n\n  function prepareRequest (sku, storeIdsArray, params) {\n    // ensure sku is good\n    if (typeof sku !== 'number' && typeof sku !== 'string') {\n      throw new Error('First parameter of \"availability\" must be the SKU, and it must be either a number or a string');\n    }\n\n    // ensure storeIdsArray is good\n    if (!Array.isArray(storeIdsArray)) {\n      throw new Error('Second parameter of \"availability\" must be store id(s), and it must be either a number or array of numbers');\n    }\n\n    var storeIds = storeIdsArray.join(',');\n    var bbyQuery = `(sku=${sku})+stores(storeId in(${storeIds}))`;\n\n    var url = `${opts.url}/v1/products${bbyQuery}`;\n\n    return { url, params };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}