{"ast":null,"code":"var Transform = require('stream').Transform,\n    util = require('util');\n\nmodule.exports = function (nodeName) {\n  return new XmlNodes(nodeName);\n};\n\nfunction XmlNodes(nodeName) {\n  this.nodeName = nodeName;\n  this.soFar = '';\n  Transform.call(this);\n}\n\nutil.inherits(XmlNodes, Transform);\n\nXmlNodes.prototype._transform = function (chunk, encoding, done) {\n  var nodes;\n  this.soFar += String(chunk);\n  nodes = this.getNodes();\n\n  for (var i = 0; i < nodes.length; i++) {\n    this.push(nodes[i]);\n  }\n\n  done();\n};\n\nXmlNodes.prototype.getNodes = function (nodes) {\n  nodes = nodes || [];\n  var openingIndex = this.getOpeningIndex(this.soFar);\n  if (openingIndex === -1) return nodes;\n  var str = this.soFar.slice(openingIndex),\n      nestedCount = this.getNestedCount(str),\n      closingIndex = this.getClosingIndex(str, nestedCount);\n  if (closingIndex === -1) return nodes;\n  nodes.push(str.slice(0, closingIndex));\n  this.soFar = str.slice(closingIndex);\n  return this.getNodes(nodes);\n};\n\nXmlNodes.prototype.getNestedCount = function (str) {\n  var openingIndex = this.getOpeningIndex(str),\n      closingIndex = str.indexOf('</' + this.nodeName + '>'),\n      currentIndex = openingIndex + 1,\n      count = 0;\n  if (!closingIndex) return false;\n\n  while (currentIndex < closingIndex) {\n    currentIndex = this.getOpeningIndex(str, currentIndex + 1);\n    if (currentIndex === -1) break;\n\n    if (currentIndex < closingIndex) {\n      count++;\n      closingIndex = this.getClosingIndex(str, count);\n    }\n  }\n\n  return count;\n};\n\nXmlNodes.prototype.getOpeningIndex = function (str, i) {\n  var withoutAttr = str.indexOf('<' + this.nodeName + '>', i),\n      withAttr = str.indexOf('<' + this.nodeName + ' ', i);\n  if (withoutAttr > -1 && withAttr === -1) return withoutAttr;\n  if (withAttr > -1 && withoutAttr === -1) return withAttr;\n  if (withAttr === -1 && withoutAttr === -1) return -1;\n  return withAttr > withoutAttr ? withAttr : withoutAttr;\n};\n\nXmlNodes.prototype.getClosingIndex = function (str, nestedCount) {\n  var isSelfClosing = /^\\<[^/\\>]+(?=\\/\\>)/.test(str);\n  if (isSelfClosing) return str.indexOf('/>') + 2;\n  var currentIndex = str.indexOf('</' + this.nodeName + '>'),\n      currentCount = 0;\n\n  while (currentCount !== nestedCount) {\n    currentIndex = str.indexOf('</' + this.nodeName + '>', currentIndex + 1);\n    if (currentIndex === -1) break;\n    currentCount++;\n  }\n\n  if (currentIndex === -1) return currentIndex;\n  return currentIndex + this.nodeName.length + 3;\n};","map":{"version":3,"sources":["C:/Users/sebas/Desktop/folders/Jobs/Elaastacloud/client/node_modules/@flet/xml-nodes/index.js"],"names":["Transform","require","util","module","exports","nodeName","XmlNodes","soFar","call","inherits","prototype","_transform","chunk","encoding","done","nodes","String","getNodes","i","length","push","openingIndex","getOpeningIndex","str","slice","nestedCount","getNestedCount","closingIndex","getClosingIndex","indexOf","currentIndex","count","withoutAttr","withAttr","isSelfClosing","test","currentCount"],"mappings":"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","sourcesContent":["var Transform = require('stream').Transform\n  , util = require('util')\n\nmodule.exports = function(nodeName) {\n  return new XmlNodes(nodeName)\n}\n\nfunction XmlNodes(nodeName) {\n  this.nodeName = nodeName\n  this.soFar = ''\n  Transform.call(this)\n}\n\nutil.inherits(XmlNodes, Transform)\n\nXmlNodes.prototype._transform = function(chunk, encoding, done) {\n  var nodes\n\n  this.soFar += String(chunk)\n  nodes = this.getNodes()\n\n  for (var i = 0; i < nodes.length; i++) {\n    this.push(nodes[i])\n  }\n\n  done()\n}\n\nXmlNodes.prototype.getNodes = function(nodes) {\n  nodes = nodes || []\n\n  var openingIndex = this.getOpeningIndex(this.soFar)\n\n  if (openingIndex === -1) return nodes\n\n  var str = this.soFar.slice(openingIndex)\n    , nestedCount = this.getNestedCount(str)\n    , closingIndex = this.getClosingIndex(str, nestedCount)\n\n  if (closingIndex === -1) return nodes\n\n  nodes.push(str.slice(0, closingIndex))\n  this.soFar = str.slice(closingIndex)\n  return this.getNodes(nodes)\n}\n\nXmlNodes.prototype.getNestedCount = function(str) {\n  var openingIndex = this.getOpeningIndex(str)\n    , closingIndex = str.indexOf('</'+this.nodeName+'>')\n    , currentIndex = openingIndex + 1\n    , count = 0\n\n  if (!closingIndex) return false\n\n  while (currentIndex < closingIndex) {\n    currentIndex = this.getOpeningIndex(str, currentIndex + 1)\n\n    if (currentIndex === -1) break\n    if (currentIndex < closingIndex) {\n      count++\n      closingIndex = this.getClosingIndex(str, count)\n    }\n  }\n\n  return count\n}\n\nXmlNodes.prototype.getOpeningIndex = function(str, i) {\n  var withoutAttr = str.indexOf('<'+this.nodeName+'>', i)\n    , withAttr = str.indexOf('<'+this.nodeName+' ', i)\n\n  if (withoutAttr > -1 && withAttr === -1) return withoutAttr\n  if (withAttr > -1 && withoutAttr === -1) return withAttr\n  if (withAttr === -1 && withoutAttr === -1) return -1\n\n  return withAttr > withoutAttr ? withAttr : withoutAttr\n}\n\nXmlNodes.prototype.getClosingIndex = function(str, nestedCount) {\n  var isSelfClosing = /^\\<[^/\\>]+(?=\\/\\>)/.test(str)\n  if (isSelfClosing) return str.indexOf('/>') + 2\n\n  var currentIndex = str.indexOf('</'+this.nodeName+'>')\n    , currentCount = 0\n\n  while (currentCount !== nestedCount) {\n    currentIndex = str.indexOf('</'+this.nodeName+'>', currentIndex + 1)\n\n    if (currentIndex === -1) break\n    currentCount++\n  }\n\n  if (currentIndex === -1) return currentIndex\n\n  return currentIndex + this.nodeName.length + 3\n}\n"]},"metadata":{},"sourceType":"script"}