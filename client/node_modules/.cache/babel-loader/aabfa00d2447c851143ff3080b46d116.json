{"ast":null,"code":"module.exports = realTimeAvailabilityEndpoint;\n\nfunction realTimeAvailabilityEndpoint(opts) {\n  return {\n    realTimeAvailability\n  };\n\n  function realTimeAvailability(sku, params, callback) {\n    if (!(params.storeId || params.postalCode)) {\n      var argsErr = new Error('Must provide either storeId or postalCode');\n\n      if (callback) {\n        callback(argsErr);\n      }\n\n      return Promise.reject(argsErr);\n    }\n\n    var req;\n\n    try {\n      req = prepareRequest(sku, params);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n\n      return Promise.reject(err);\n    }\n\n    return opts.apiService(req, callback);\n  }\n\n  function prepareRequest(sku, params) {\n    // ensure sku is good\n    if (typeof sku !== 'number' && typeof sku !== 'string') {\n      throw new Error('First parameter of \"realTimeAvailability\" must be the SKU, and it must be either a number or a string');\n    }\n\n    var url = `${opts.url}/v1/products/${sku}/stores.json`;\n    return {\n      url,\n      params\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/sebas/Desktop/folders/Jobs/Elaastacloud/client/node_modules/bestbuy/lib/real-time-availability.js"],"names":["module","exports","realTimeAvailabilityEndpoint","opts","realTimeAvailability","sku","params","callback","storeId","postalCode","argsErr","Error","Promise","reject","req","prepareRequest","err","apiService","url"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,4BAAjB;;AAEA,SAASA,4BAAT,CAAuCC,IAAvC,EAA6C;AAC3C,SAAO;AAAEC,IAAAA;AAAF,GAAP;;AAEA,WAASA,oBAAT,CAA+BC,GAA/B,EAAoCC,MAApC,EAA4CC,QAA5C,EAAsD;AACpD,QAAI,EAAED,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACG,UAA3B,CAAJ,EAA4C;AAC1C,UAAIC,OAAO,GAAG,IAAIC,KAAJ,CAAU,2CAAV,CAAd;;AACA,UAAIJ,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACG,OAAD,CAAR;AACD;;AACD,aAAOE,OAAO,CAACC,MAAR,CAAeH,OAAf,CAAP;AACD;;AAED,QAAII,GAAJ;;AACA,QAAI;AACFA,MAAAA,GAAG,GAAGC,cAAc,CAACV,GAAD,EAAMC,MAAN,CAApB;AACD,KAFD,CAEE,OAAOU,GAAP,EAAY;AACZ,UAAIT,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACS,GAAD,CAAR;AACD;;AACD,aAAOJ,OAAO,CAACC,MAAR,CAAeG,GAAf,CAAP;AACD;;AAED,WAAOb,IAAI,CAACc,UAAL,CAAgBH,GAAhB,EAAqBP,QAArB,CAAP;AACD;;AAED,WAASQ,cAAT,CAAyBV,GAAzB,EAA8BC,MAA9B,EAAsC;AACpC;AACA,QAAI,OAAOD,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;AACtD,YAAM,IAAIM,KAAJ,CAAU,uGAAV,CAAN;AACD;;AAED,QAAIO,GAAG,GAAI,GAAEf,IAAI,CAACe,GAAI,gBAAeb,GAAI,cAAzC;AAEA,WAAO;AAAEa,MAAAA,GAAF;AAAOZ,MAAAA;AAAP,KAAP;AACD;AACF","sourcesContent":["module.exports = realTimeAvailabilityEndpoint;\n\nfunction realTimeAvailabilityEndpoint (opts) {\n  return { realTimeAvailability };\n\n  function realTimeAvailability (sku, params, callback) {\n    if (!(params.storeId || params.postalCode)) {\n      var argsErr = new Error('Must provide either storeId or postalCode');\n      if (callback) {\n        callback(argsErr);\n      }\n      return Promise.reject(argsErr);\n    }\n\n    var req;\n    try {\n      req = prepareRequest(sku, params);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n      return Promise.reject(err);\n    }\n\n    return opts.apiService(req, callback);\n  }\n\n  function prepareRequest (sku, params) {\n    // ensure sku is good\n    if (typeof sku !== 'number' && typeof sku !== 'string') {\n      throw new Error('First parameter of \"realTimeAvailability\" must be the SKU, and it must be either a number or a string');\n    }\n\n    var url = `${opts.url}/v1/products/${sku}/stores.json`;\n\n    return { url, params };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}