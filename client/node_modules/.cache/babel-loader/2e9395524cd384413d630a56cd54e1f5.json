{"ast":null,"code":"module.exports = debugLogger;\n\nvar peek = require('peek-stream');\n\nvar through = require('through2');\n\nvar pump = require('pump');\n\nfunction debugLogger(instance, debug) {\n  var debugFn;\n\n  if (typeof debug === 'function') {\n    debugFn = debug;\n  } else {\n    debugFn = data => {\n      if (data.error) {\n        console.error(data.error);\n      } else {\n        var formattedData;\n\n        try {\n          formattedData = JSON.stringify(data, null, 2);\n        } catch (err) {\n          console.error('Error while trying to JSON format the data!', err.message, err.stack);\n          formattedData = data;\n        }\n\n        console.log(formattedData);\n      }\n    };\n  }\n\n  instance.interceptors.request.use(function (request) {\n    debugFn({\n      request: {\n        method: request.method,\n        url: request.url,\n        headers: request.headers,\n        params: request.params,\n        responseType: request.responseType\n      }\n    });\n    return request;\n  });\n  instance.interceptors.response.use(function (response) {\n    var body = response.data;\n\n    if (response.data.readable) {\n      var stream = body;\n      var peekStream = peek(function (data, swap) {\n        debugFn({\n          response: {\n            headers: response.headers,\n            status: response.status,\n            url: response.url,\n            isStream: true,\n            body: data.toString()\n          }\n        });\n        swap(null, through());\n      });\n      pump(stream, peekStream);\n      response.data = peekStream;\n    } else {\n      debugFn({\n        response: {\n          headers: response.headers,\n          status: response.status,\n          url: response.url,\n          body: body\n        }\n      });\n    }\n\n    return response;\n  }, function (error) {\n    debugFn({\n      error\n    });\n    throw error;\n  });\n}","map":{"version":3,"sources":["C:/Users/sebas/Desktop/folders/Jobs/Elaastacloud/client/node_modules/bestbuy/lib/debug-logger.js"],"names":["module","exports","debugLogger","peek","require","through","pump","instance","debug","debugFn","data","error","console","formattedData","JSON","stringify","err","message","stack","log","interceptors","request","use","method","url","headers","params","responseType","response","body","readable","stream","peekStream","swap","status","isStream","toString"],"mappings":"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","sourcesContent":["module.exports = debugLogger;\n\nvar peek = require('peek-stream');\nvar through = require('through2');\nvar pump = require('pump');\n\nfunction debugLogger (instance, debug) {\n  var debugFn;\n  if (typeof debug === 'function') {\n    debugFn = debug;\n  } else {\n    debugFn = (data) => {\n      if (data.error) {\n        console.error(data.error);\n      } else {\n        var formattedData;\n        try {\n          formattedData = JSON.stringify(data, null, 2);\n        } catch (err) {\n          console.error('Error while trying to JSON format the data!', err.message, err.stack);\n          formattedData = data;\n        }\n        console.log(formattedData);\n      }\n    };\n  }\n\n  instance.interceptors.request.use(function (request) {\n    debugFn({\n      request: {\n        method: request.method,\n        url: request.url,\n        headers: request.headers,\n        params: request.params,\n        responseType: request.responseType\n      }\n    });\n    return request;\n  });\n  instance.interceptors.response.use(function (response) {\n    var body = response.data;\n    if (response.data.readable) {\n      var stream = body;\n\n      var peekStream = peek(function (data, swap) {\n        debugFn({\n          response: {\n            headers: response.headers,\n            status: response.status,\n            url: response.url,\n            isStream: true,\n            body: data.toString()\n          }\n        });\n        swap(null, through());\n      });\n\n      pump(stream, peekStream);\n      response.data = peekStream;\n    } else {\n      debugFn({\n        response: {\n          headers: response.headers,\n          status: response.status,\n          url: response.url,\n          body: body\n        }\n      });\n    }\n\n    return response;\n  }, function (error) {\n    debugFn({ error });\n    throw error;\n  });\n}\n"]},"metadata":{},"sourceType":"script"}